#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* start = NULL;

struct Node* createNode(int val) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed.\n");
        exit(1);
    }
    newNode->data = val;
    newNode->next = NULL;
    return newNode;
}

void insertAtStart(int val) {
    struct Node* newNode = createNode(val);
    newNode->next = start;
    start = newNode;
}

void insertAtEnd(int val) {
    struct Node* newNode = createNode(val);
    if (start == NULL) {
        start = newNode;
        return;
    }
    struct Node* ptr = start;
    while (ptr->next != NULL) {
        ptr = ptr->next;
    }
    ptr->next = newNode;
}

void insertBeforeNode(int num, int val) {
    if (start == NULL) {
        printf("List is empty.\n");
        return;
    }
    if (start->data == num) {
        insertAtStart(val);
        return;
    }

    struct Node* ptr = start;
    struct Node* pptr = NULL;

    while (ptr != NULL && ptr->data != num) {
        pptr = ptr;
        ptr = ptr->next;
    }
    if (ptr == NULL) {
        printf("Node with value %d not found.\n", num);
        return;
    }

    struct Node* newNode = createNode(val);
    pptr->next = newNode;
    newNode->next = ptr;
}

void insertAfterNode(int num, int val) {
    struct Node* ptr = start;
    while (ptr != NULL && ptr->data != num) {
        ptr = ptr->next;
    }
    if (ptr == NULL) {
        printf("Node with value %d not found.\n", num);
        return;
    }
    struct Node* newNode = createNode(val);
    newNode->next = ptr->next;
    ptr->next = newNode;
}

void deleteFirstNode() {
    if (start == NULL) {
        printf("List is empty.\n");
        return;
    }
    struct Node* temp = start;
    start = start->next;
    free(temp);
}

void deleteBeforeGivenNode(int num) {
    if (start == NULL || start->next == NULL) {
        printf("List is too short.\n");
        return;
    }
    if (start->data == num) {
        printf("No node exists before the given node.\n");
        return;
    }
    if (start->next->data == num) {
        // Delete first node
        deleteFirstNode();
        return;
    }

    struct Node* pptr = start;
    struct Node* ptr = start->next;
    struct Node* nptr = ptr->next;

    while (nptr != NULL && nptr->data != num) {
        pptr = ptr;
        ptr = nptr;
        nptr = nptr->next;
    }
    if (nptr == NULL) {
        printf("Node with value %d not found.\n", num);
        return;
    }

    // Delete ptr (node before the one with value num)
    pptr->next = nptr;
    free(ptr);
}

void deleteGivenNode(int num) {
    if (start == NULL) {
        printf("List is empty.\n");
        return;
    }
    if (start->data == num) {
        deleteFirstNode();
        return;
    }

    struct Node* ptr = start;
    struct Node* pptr = NULL;
    while (ptr != NULL && ptr->data != num) {
        pptr = ptr;
        ptr = ptr->next;
    }
    if (ptr == NULL) {
        printf("Node with value %d not found.\n", num);
        return;
    }

    pptr->next = ptr->next;
    free(ptr);
}

void deleteAfterGivenNode(int num) {
    struct Node* ptr = start;
    while (ptr != NULL && ptr->data != num) {
        ptr = ptr->next;
    }
    if (ptr == NULL) {
        printf("Node with value %d not found.\n", num);
        return;
    }
    if (ptr->next == NULL) {
        printf("No node exists after node with value %d.\n", num);
        return;
    }
    struct Node* temp = ptr->next;
    ptr->next = temp->next;
    free(temp);
}

void deleteLastNode() {
    if (start == NULL) {
        printf("List is empty.\n");
        return;
    }
    if (start->next == NULL) {
        free(start);
        start = NULL;
        return;
    }
    struct Node* ptr = start;
    struct Node* pptr = NULL;
    while (ptr->next != NULL) {
        pptr = ptr;
        ptr = ptr->next;
    }
    pptr->next = NULL;
    free(ptr);
}

void display() {
    struct Node* ptr = start;
    if (ptr == NULL) {
        printf("List is empty.\n");
        return;
    }
    while (ptr != NULL) {
        printf("%d -> ", ptr->data);
        ptr = ptr->next;
    }
    printf("NULL\n");
}

int main() {
    int choice, val, num;

    printf("-----MENU DRIVEN PROGRAM-----\n");
    printf("1.Insert At Start\n");
    printf("2.Insert Before Node\n");
    printf("3.Insert After Node\n");
    printf("4.Insert At End\n");
    printf("5.Delete First Node\n");
    printf("6.Delete Before Given Node\n");
    printf("7.Delete Given Node\n");
    printf("8.Delete After Given Node\n");
    printf("9.Delete Last Node\n");
    printf("10.Display\n");
    printf("11.Exit\n");

    while (1) {
        printf("\nEnter choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter Value: ");
                scanf("%d", &val);
                insertAtStart(val);
                break;

            case 2:
                printf("Enter Number: ");
                scanf("%d", &num);
                printf("Enter Value: ");
                scanf("%d", &val);
                insertBeforeNode(num, val);
                break;

            case 3:
                printf("Enter Number: ");
                scanf("%d", &num);
                printf("Enter Value: ");
                scanf("%d", &val);
                insertAfterNode(num, val);
                break;

            case 4:
                printf("Enter Value: ");
                scanf("%d", &val);
                insertAtEnd(val);
                break;

            case 5:
                deleteFirstNode();
                break;

            case 6:
                printf("Enter Number: ");
                scanf("%d", &num);
                deleteBeforeGivenNode(num);
                break;

            case 7:
                printf("Enter Number: ");
                scanf("%d", &num);
                deleteGivenNode(num);
                break;

            case 8:
                printf("Enter Number: ");
                scanf("%d", &num);
                deleteAfterGivenNode(num);
                break;

            case 9:
                deleteLastNode();
                break;

            case 10:
                display();
                break;

            case 11:
                printf("Exiting program.\n");
                return 0;

            default:
                printf("Invalid choice! Please try again.\n");
        }
    }

    return 0;
}
